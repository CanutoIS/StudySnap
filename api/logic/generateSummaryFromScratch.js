require('dotenv').config()

const { validators: { validateId, validateText }, errors: { ExistenceError } } = require('com')
const { User } = require('../data/models')
const { Configuration, OpenAIApi } = require('openai')

/**
 * Generates a summary from a text provided by the user
 * 
 * @param {string} userId The user id 
 * @param {string} textToSummarize The text proided
 * 
 * @returns {Promise<string>} The summary generated by the API
 * 
 * @throws {TypeError} On non-string user id or text to summarize
 * @throws {ContentError} On user id not equal to 24 characters of length or not hexadecimal or empty text to summarize
 * @throws {ExistenceError} On non-existing user
 */

module.exports = function generateSummary(userId, textToSummarize) {
    validateId(userId, 'user id')
    validateText(textToSummarize, 'text to summarize')

    return (async () => {
        const user = await User.findById(userId)
        if(!user) throw new ExistenceError('User not found.')
        
        const configuration = new Configuration({
            apiKey: process.env.OPENAI_API_KEY
        })

        const openai = new OpenAIApi(configuration)

        const response = await openai.createCompletion({
            model: 'text-davinci-003',
            prompt: `Generate a well-structured long summary from the following text:
            ${textToSummarize}`,
            max_tokens: 2000,
            temperature: 0.2
        })

        const summary = response.data.choices[0].text.trim()

        return summary
    })()
}
