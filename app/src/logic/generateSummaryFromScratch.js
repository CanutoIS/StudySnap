import context from "./context"
import { errors, validators } from "com"

const { validateText } = validators
const { ContentError } = errors

/**
 * Generates a summary from the text provided by the user.
 * 
 * @param {string} textToSummarize The text to summarize
 * 
 * @returns {Promise<string>} The summary generated by the API.
 * 
 * @throws {TypeError} On non-string text to summarize
 * @throws {ContentError} On empty text to summarize
 */

export default function generateSummary(textToSummarize) {
    validateText(textToSummarize, 'text to summarize')

    return (async () => {
        const res = await fetch(`${import.meta.env.VITE_API_URL}/users/textToSummarize`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${context.token}`
            },
            body: JSON.stringify({ textToSummarize })
        })

        if (res.status === 201)
            return res.text()

        const { type, message } = await res.json()

        if(message === 'Request failed with status code 400')
            throw new ContentError('The text to summarize may be very long.')
        else {
            const clazz = errors[type]

            throw new clazz(message)
        }
    })()
}